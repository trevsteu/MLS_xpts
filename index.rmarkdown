---
title: "MLS Expected Points"
author: Trevor S.
format: html
editor: visual
---


# Motivation:

Note that his project is a work in progress. I will update as I have the time.

# Setup:


```{r, results = "hide", message=FALSE, warning=FALSE}
library(tidyr)
library(tidyverse)
library(gt)
library(rvest)
library(dplyr)
library(reactable)
```


# Code:


```{r, warning = FALSE, message=FALSE}
url <- str_glue("https://fbref.com/en/comps/22/schedule/Major-League-Soccer-Scores-and-Fixtures")

n <- 1000 # number of times to simulate each game

html <- read_html(url)
data <- html |> 
  html_element("table") |> 
  html_table() |> 
  janitor::clean_names() |> 
  filter(date != "Date" & score != "") |> 
  separate_wider_regex(score, patterns = c(home_score = "[0-9]+", "â€“", 
                                           away_score = "[0-9]+")) |>
    select("date", "home", "home_xg" = "x_g", "home_score", "away_score", "away_xg" = "x_g_2", "away") |> 
  mutate("home_pts" = ifelse(home_score > away_score, 3, 
                             ifelse(home_score == away_score, 1, 0)), 
         "away_pts" = ifelse(away_score > home_score, 3, 
                             ifelse(away_score == home_score, 1, 0))) |>
  type_convert()

home_xpts <- rep(NA, times = nrow(data))
away_xpts <- rep(NA, times = nrow(data))
for(i in 1:nrow(data)){
  home_sim <- rpois(n, data$home_xg[i])
  away_sim <- rpois(n, data$away_xg[i])
  home_xpts[i] <- (3 * sum(home_sim > away_sim) + sum(home_sim == away_sim))/n
  away_xpts[i] <- (3 * sum(away_sim > home_sim) + sum(away_sim == home_sim))/n
}

# combine table of results with simulated results
data <- cbind(data, home_xpts, away_xpts) 

xpts_table <- data |>
  pivot_longer(cols = c("home", "away"), values_to = "team") |> 
  mutate("pts" = ifelse(name == "home", home_pts, away_pts),
         "xpts" = ifelse(name == "home", home_xpts, away_xpts), 
         "xg_for" = ifelse(name == "home", home_xg, away_xg), 
         "xg_ag" = ifelse(name == "home", away_xg, home_xg), 
         "scored" = ifelse(name == "home", home_score, away_score), 
         "against" = ifelse(name == "home", away_score, home_score), 
         "pts_over_exp" = pts - xpts) |>
  select(team, "gf" = scored, "ga" = against, pts, xg_for, 
           xg_ag, xpts, pts_over_exp) |> 
  group_by(team) |> 
  summarize(gp = n(), across(gf:xpts, \(x) round(mean(x), 3)), 
            pts_over_exp = round(sum(pts_over_exp), 3)) |> 
  arrange(desc(xpts))
```


# Results


```{r}
# use reactable to allow for interactive sorting
reactable(xpts_table, pagination = FALSE)
```

